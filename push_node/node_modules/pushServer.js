#!/usr/bin/env node

Array.prototype.remove = function(from, to)
{
  var rest = this.slice((to || from) + 1 || this.length);
  this.length = from < 0 ? this.length + from : from;
  return this.push.apply(this, rest);
}

Array.prototype.indexOf = function(object) {
    for (var i = 0, length = this.length; i < length; i++){
        if (this[i] == object) 
        {
        	return i;
        }
    }
    return -1;
};

var pushServer = exports;

var createServer = require("http").createServer;
var path = require("path");
var sys = require("util");
var fs = require("fs");
var querystring = require('querystring');
var url = require("url");

var gcm = require("node-gcm");

var regIdsFromAndroid = new Array;
var regIdsFromIOS = [];
var handlerMap = new Object;
var port = 	process.argv[2] || 8090;

var server = createServer(function (req, res) 
{
    res.simpleText = function (code, body) 
    {
      res.writeHead(code, { "Content-Type": "text/plain"
                          , "Content-Length": body.length
                          });
      res.end(body);
    };

	if(req.method == "GET" || req.method == "HEAD" || req.method =="POST")
	{
		var handler = handlerMap[url.parse(req.url).pathname] || null;
		if(handler)
		{
			handler(req, res);
		}
		else
		{
			var uri = url.parse(req.url).pathname;
			sys.puts("URI: " + uri);
		}
	}
});

register = function(deviceType)
{
	var save;
	if(deviceType == 'android')
	{
		save = JSON.stringify({"regIds":regIdsFromAndroid});
	}
	else
	{
		save = JSON.stringify({"regIds":regIdsFromIOS});	
	}
	
	var fileName = path.join(process.cwd(), deviceType+"_regIds");
	fs.writeFile(fileName, save, function (err) 
	{
  		if (err) throw err;
  		console.log('It\'s saved!: '+ save + "\n DeviceType: " + deviceType);	
	});
}

setHandler = function(path, handler) 
{
	handlerMap[path] = handler;	
};

setHandler("/register", function(req, res){
	var body = "";

	req.on("data", function(data) 
	{
		body += data;
	});
	
	req.on("end", function() 
	{
		var POST = querystring.parse(body);

		if(POST.deviceType == "android")
		{
			var isDuplicate = false;
			for(var i = 0; i<regIdsFromAndroid.length; i++)
			{
				if(regIdsFromAndroid[i] == POST.regId)
				{
					isDuplicate = true;	
				}
			}
			
			if(!isDuplicate)
			{
				regIdsFromAndroid[regIdsFromAndroid.length] = POST.regId;
		  		register("android");
			}

		}
		else if(POST.deviceType == "ios")
		{
			var isDuplicate = false;
			for(var i = 0; i<regIdsFromIOS.length; i++)
			{
				if(regIdsFromIOS[i] == POST.regId)
				{
					isDuplicate = true;	
				}
			}
			
			if(!isDuplicate)
			{
				regIdsFromIOS[regIdsFromIOS.length] = POST.regId;
				register("ios");
			}
		}
	});
	
	res.simpleText(200, 0);
});

setHandler("/unregister", function(req, res)
{
	var body = "";
	req.on("data", function(data) 
	{
		body += data;
	});
	
	req.on("end", function() 
	{
		var POST = querystring.parse(body);
		console.log("regIdsFromAndroid.indexOf(POST.regId): "+regIdsFromAndroid.indexOf(POST.regId));
		if(regIdsFromAndroid.indexOf(POST.regId) != -1)
		{
			regIdsFromAndroid.remove(regIdsFromAndroid.indexOf(POST.regId));	
			register("android");
			res.simpleText(200, 0);
		}
		else
		{
			res.simpleText(500, 0);
		}
	});
});

pushServer.setGCMOptions = function(options)
{
	gcmOptions = options;
}

setHandler("/sendAll", function(req, res)
{
	var message = new gcm.Message();
	var sender = new gcm.Sender(gcmOptions.apiKey);
	var mStatus = "";
	 
	req.on("end", function()
	{
		sys.puts("sendAll: ");
	});		
	
	
	if(regIdsFromAndroid.length == 0)
	{
		console.log("Message ignored as there is no device registered!");	
	}
	else
	{
		var fileName = path.join(process.cwd(), "message");
		fs.readFile(fileName, function (err, data) 
		{
			if(err)
			{
	       		sys.puts("Error loading " + fileName);
			}
			else
			{
				var jsonData = JSON.parse(data);
				message.addData(jsonData.messageKey, jsonData.messageValue);	
				
				/*
				 *send to android devices
				 *see GCM API
				 */
				sender.send(message, regIdsFromAndroid, 5, function (results) 
				{
					//from node-gcm sender
					if(regIdsFromAndroid.length == 1)
					{
						console.log("errorCode: "+ results.errorCode);
					}
					else
					{
						for(i = 0; i<regIdsFromAndroid.length; i++)
						{ 
							var result = results.results[i];
							console.log("errorCode: "+ result.error);
							
							if(result.message_id != null)
							{
								mStatus += "Succesfully sent message to device #" + i;
								var canonicalRegId = result.registration_id;
								if(canonicalRegId != null)
								{
									console.log("canonicalRegId " + canonicalRegId);
									regIdsFromAndroid.remove(i);
									regIdsFromAndroid[regIdsFromAndroid.length] = canonicalRegId;
									mStatus += ". Also updated registration id!";
									register("android");
								}	
							}
							else
							{
								var error = result.error;
								if(error == gcm.Constants.ERROR_NOT_REGISTERED)
								{
									mStatus	+= "Unregistered device #" + i ;
									regIdsFromAndroid.remove(i);
									register("android");
								}
								else
								{
									mStatus += "Error sending message to device #" + i + ": "+ error;
								}
							}
							console.log(mStatus);
							mStatus = "";
						}
					}
				});	
			}
		});	
	}
	
	//send to IOS
	sendToAllIOS();
});


pushServer.listen = function(port, host) 
{
	server.listen(port, host);
	sys.puts("Server at http://" + (host || "127.0.0.1") + ":" + port.toString() + "/");	

	var fileName = path.join(process.cwd(), "android_regIds");
	fs.readFile(fileName, function (err, data) 
	{
		if(err)
		{
       		sys.puts("Error loading " + fileName);
		}
		else
		{
			try
			{
				var jsonData = JSON.parse(data);
				regIdsFromAndroid = jsonData.regIds;
			}
			catch(err)
			{
				console.log("android : registered regIds are not found.");	
			}
		}
	});
	
	fileName = path.join(process.cwd(), "ios_regIds");
	fs.readFile(fileName, function (err, data) 
	{
		if(err)
		{
       		sys.puts("Error loading " + fileName);
		}
		else
		{
			try
			{
				var jsonData = JSON.parse(data);
				regIdsFromIOS = jsonData.regIds;
			}
			catch(err)
			{
				console.log("ios : registered regIds are not found.");	
			}
		}
	});
};

//====================================== APNS ==================================

var apns = require('apn');
var apnOptions;
var noteOptions;

pushServer.setAPNS = function(options, note, feedbackOptions)
{
	apnOptions = options;
	
	var fileName = path.join(process.cwd(), "message");
	fs.readFile(fileName, function (err, data) 
	{
		if(err)
		{
       		sys.puts("Error loading " + fileName);
		}
		else
		{
			var jsonData = JSON.parse(data);
			note.payload[jsonData.messageKey] = jsonData.messageValue;
			noteOptions = note;
		}
	});
	
	if(feedbackOptions != null)
		setFeedback(feedbackOptions);
}

feedback = function (time, deviceToken)
{
	console.log("regIdsFromIOS.indexOf(deviceToken) : "+regIdsFromIOS.indexOf(deviceToken));

	if(regIdsFromIOS.indexOf(deviceToken) != -1)
	{
		regIdsFromIOS.remove(regIdsFromIOS.indexOf(deviceToken));	
		register("ios");
		console.log("ios_regid remove : "+deviceToken);
	}
}

setFeedback = function(feedbackOptions)
{
	feedbackOptions.feedback = feedback;
	new apns.Feedback(feedbackOptions);	
}

sendToAllIOS = function()
{
	var apnsConnection = new apns.Connection(apnOptions);
	
	for(var i = 0; i < regIdsFromIOS.length; i++)
	{
		var myDevice = new apns.Device(regIdsFromIOS[i]);
		var note = new apns.Notification();
		
		note.expiry = noteOptions.expiry;
		note.badge = noteOptions.badge;
		note.sound = noteOptions.sound;
		note.alert = noteOptions.alert;
		note.payload = noteOptions.payload;
		note.device = myDevice;
		apnsConnection.sendNotification(note);
	}
}